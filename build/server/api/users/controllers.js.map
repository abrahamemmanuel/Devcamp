{"version":3,"sources":["../../../../src/server/api/users/controllers.js"],"names":["UserController","req","res","status","render","user","body","name","email","password","password2","errors","length","User","findOne","then","push","msg","avatar","gravatar","url","s","r","d","newUser","bcrypt","genSalt","err","salt","hash","save","flash","redirect","catch","console","log","next","passport","authenticate","successRedirect","failureRedirect","failureFlash","id","findByIdAndUpdate","$set","isLogin","new","logout","userController"],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\r\nimport passport from 'passport';\r\nimport bcrypt from 'bcryptjs';\r\nimport gravatar from 'gravatar';\r\nimport User from '../../../database/models/User';\r\nimport Profile from '../../../database/models/Profile';\r\nimport validateRegisterInput from '../../../utils/validation/register';\r\n\r\nclass UserController {\r\n\tgetIndexPage(req, res) {\r\n\t\tres.status(200).render('index', { user: req.user });\r\n\t}\r\n\r\n\tgetLoginPage(req, res) {\r\n\t\tres.status(200).render('login');\r\n\t}\r\n\r\n\tgetSignUpPage(req, res) {\r\n\t\tres.status(200).render('register');\r\n\t}\r\n\r\n\tregisterUser(req, res) {\r\n\t\tconst { name, email, password, password2 } = req.body;\r\n\t\tconst errors = validateRegisterInput(name, email, password, password2);\r\n\t\tif (errors.length > 0) {\r\n\t\t\tres.status(404).render('register', { errors, name, email, password, password2 });\r\n\t\t} else {\r\n\t\t\t// Validation passed\r\n\t\t\tUser.findOne({ email: email }).then(user => {\r\n\t\t\t\tif (user) {\r\n\t\t\t\t\t// User exists\r\n\t\t\t\t\terrors.push({ msg: 'User already exist with this email' });\r\n\t\t\t\t\tres\r\n\t\t\t\t\t\t.status(404)\r\n\t\t\t\t\t\t.render('register', { errors, name, email, password, password2 });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst avatar = gravatar.url(req.body.email, {\r\n\t\t\t\t\t\ts: '200', // Size\r\n\t\t\t\t\t\tr: 'pg', //Rating\r\n\t\t\t\t\t\td: 'mm' // Default\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tconst newUser = new User({\r\n\t\t\t\t\t\tname,\r\n\t\t\t\t\t\temail,\r\n\t\t\t\t\t\tavatar,\r\n\t\t\t\t\t\tpassword\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Hash password\r\n\t\t\t\t\tbcrypt.genSalt(10, (err, salt) =>\r\n\t\t\t\t\t\tbcrypt.hash(newUser.password, salt, (err, hash) => {\r\n\t\t\t\t\t\t\tif (err) throw err;\r\n\t\t\t\t\t\t\t// Set password to hashed\r\n\t\t\t\t\t\t\tnewUser.password = hash;\r\n\t\t\t\t\t\t\t// Save user\r\n\t\t\t\t\t\t\tnewUser\r\n\t\t\t\t\t\t\t\t.save()\r\n\t\t\t\t\t\t\t\t.then(user => {\r\n\t\t\t\t\t\t\t\t\treq.flash(\r\n\t\t\t\t\t\t\t\t\t\t'success_msg',\r\n\t\t\t\t\t\t\t\t\t\t'You are now registered and can log in'\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\tres.redirect('/api/users/login');\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.catch(err => console.log(err));\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tlogin(req, res, next) {\r\n\t\tpassport.authenticate('local', {\r\n\t\t\tsuccessRedirect: '/api/users/updateAuth',\r\n\t\t\tfailureRedirect: '/api/users/login',\r\n\t\t\tfailureFlash: true\r\n\t\t})(req, res, next);\r\n\t}\r\n\r\n\tlogout(req, res) {\r\n\t\tconst id = req.user.id;\r\n\t\t// Find logged in user by id and update isLogin value\r\n\t\tUser.findByIdAndUpdate(id, { $set: { isLogin: false } }, { new: true })\r\n\t\t\t.then(user => res.status(200))\r\n\t\t\t.catch(err => console.log(err));\r\n\t\treq.logout();\r\n\t\treq.flash('success_msg', 'You are logged out');\r\n\t\tres.redirect('/api/users/login');\r\n\t}\r\n\r\n\tisLoggedIn(req, res) {\r\n\t\tUser.findByIdAndUpdate(req.user.id, { $set: { isLogin: true } }, { new: true })\r\n\t\t\t.then(user => res.status(200).redirect('/api/profile/dashboard'))\r\n\t\t\t.catch(err => console.log(err));\r\n\t}\r\n}\r\n\r\nconst userController = new UserController();\r\n\r\nexport default userController;\r\n"],"file":"controllers.js"}