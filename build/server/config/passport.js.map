{"version":3,"sources":["../../../src/server/config/passport.js"],"names":["LocalStrategy","require","Strategy","module","exports","passport","use","usernameField","email","password","done","User","findOne","then","user","message","bcrypt","compare","err","isMatch","serializeUser","id","deserializeUser","findById"],"mappings":";;AAAA;;AACA;;AACA;;;;AACA,IAAMA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAAP,CAA0BC,QAAhD,C,CAEA;;;AAGAC,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmB;AAClCA,EAAAA,QAAQ,CAACC,GAAT,CACE,IAAIN,aAAJ,CAAkB;AAAEO,IAAAA,aAAa,EAAE;AAAjB,GAAlB,EAA8C,UAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AACvE;AACAC,kBAAKC,OAAL,CAAa;AACXJ,MAAAA,KAAK,EAAEA;AADI,KAAb,EAEGK,IAFH,CAEQ,UAAAC,IAAI,EAAI;AACd,UAAI,CAACA,IAAL,EAAW;AACT,eAAOJ,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEK,UAAAA,OAAO,EAAE;AAAX,SAAd,CAAX;AACD,OAHa,CAKd;;;AACAC,wBAAOC,OAAP,CAAeR,QAAf,EAAyBK,IAAI,CAACL,QAA9B,EAAwC,UAACS,GAAD,EAAMC,OAAN,EAAkB;AACxD,YAAID,GAAJ,EAAS,MAAMA,GAAN;;AACT,YAAIC,OAAJ,EAAa;AACX,iBAAOT,IAAI,CAAC,IAAD,EAAOI,IAAP,CAAX;AACD,SAFD,MAEO;AACL,iBAAOJ,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEK,YAAAA,OAAO,EAAE;AAAX,WAAd,CAAX;AACD;AACF,OAPD;AAQD,KAhBD;AAiBD,GAnBD,CADF;AAuBAV,EAAAA,QAAQ,CAACe,aAAT,CAAuB,UAASN,IAAT,EAAeJ,IAAf,EAAqB;AAC1CA,IAAAA,IAAI,CAAC,IAAD,EAAOI,IAAI,CAACO,EAAZ,CAAJ;AACD,GAFD;AAIAhB,EAAAA,QAAQ,CAACiB,eAAT,CAAyB,UAASD,EAAT,EAAaX,IAAb,EAAmB;AAC1CC,kBAAKY,QAAL,CAAcF,EAAd,EAAkB,UAASH,GAAT,EAAcJ,IAAd,EAAoB;AACpCJ,MAAAA,IAAI,CAACQ,GAAD,EAAMJ,IAAN,CAAJ;AACD,KAFD;AAGD,GAJD;AAKD,CAjCD","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport User from '../../database/models/User';\nconst LocalStrategy = require('passport-local').Strategy;\n\n// Load User model\n\n\nmodule.exports = function(passport) {\n  passport.use(\n    new LocalStrategy({ usernameField: 'email' }, (email, password, done) => {\n      // Match user\n      User.findOne({\n        email: email\n      }).then(user => {\n        if (!user) {\n          return done(null, false, { message: 'That email is not registered' });\n        }\n\n        // Match password\n        bcrypt.compare(password, user.password, (err, isMatch) => {\n          if (err) throw err;\n          if (isMatch) {\n            return done(null, user);\n          } else {\n            return done(null, false, { message: 'Password incorrect' });\n          }\n        });\n      });\n    })\n  );\n\n  passport.serializeUser(function(user, done) {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(function(id, done) {\n    User.findById(id, function(err, user) {\n      done(err, user);\n    });\n  });\n};\n"],"file":"passport.js"}