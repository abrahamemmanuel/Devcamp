{"version":3,"sources":["../../src/server/server.js"],"names":["app","require","passport","use","express","static","set","urlencoded","extended","secret","resave","saveUninitialized","initialize","session","req","res","next","locals","success_msg","flash","error_msg","error","db","process","env","MONGODB_URI","key","LOCALDB_URI","mongoose","connect","useNewUrlParser","then","console","log","catch","err","userRouter","profileRouter","get","status","render","module","parent","listen"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AACA,IAAMA,GAAG,GAAG,uBAAZ,C,CAEA;;AACAC,OAAO,CAAC,mBAAD,CAAP,CAA6BC,iBAA7B,E,CAEA;;;AACAF,GAAG,CAACG,GAAJ,CAAQC,iBAAQC,MAAR,CAAe,QAAf,CAAR;AACAL,GAAG,CAACG,GAAJ,CAAQ,MAAR,EAAgBC,iBAAQC,MAAR,CAAe,QAAf,CAAhB,E,CAEA;;AACAL,GAAG,CAACM,GAAJ,CAAQ,OAAR,EAAiB,SAAjB;AACAN,GAAG,CAACM,GAAJ,CAAQ,aAAR,EAAuB,KAAvB,E,CAEA;;AACAN,GAAG,CAACG,GAAJ,CAAQC,iBAAQG,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR,E,CAEA;;AACAR,GAAG,CAACG,GAAJ,CACE,6BAAQ;AACNM,EAAAA,MAAM,EAAE,QADF;AAENC,EAAAA,MAAM,EAAE,IAFF;AAGNC,EAAAA,iBAAiB,EAAE;AAHb,CAAR,CADF,E,CAQA;;AACAX,GAAG,CAACG,GAAJ,CAAQD,kBAASU,UAAT,EAAR;AACAZ,GAAG,CAACG,GAAJ,CAAQD,kBAASW,OAAT,EAAR,E,CAEA;;AACAb,GAAG,CAACG,GAAJ,CAAQ,4BAAR,E,CAEA;;AACAH,GAAG,CAACG,GAAJ,CAAQ,UAACW,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1BD,EAAAA,GAAG,CAACE,MAAJ,CAAWC,WAAX,GAAyBJ,GAAG,CAACK,KAAJ,CAAU,aAAV,CAAzB;AACAJ,EAAAA,GAAG,CAACE,MAAJ,CAAWG,SAAX,GAAuBN,GAAG,CAACK,KAAJ,CAAU,WAAV,CAAvB;AACAJ,EAAAA,GAAG,CAACE,MAAJ,CAAWI,KAAX,GAAmBP,GAAG,CAACK,KAAJ,CAAU,OAAV,CAAnB;AACAH,EAAAA,IAAI;AACL,CALD,E,CAOA;;AACA,IAAMM,EAAE,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAAZ,IAA2BC,cAAIC,WAA1C,C,CAEA;;AACAC,kBAAStB,GAAT,CAAa,kBAAb,EAAiC,KAAjC,E,CAEA;;;AACAsB,kBAASC,OAAT,CAAiBP,EAAjB,EAAqB;AAAEQ,EAAAA,eAAe,EAAE;AAAnB,CAArB,EAAgDC,IAAhD,CAAqD;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAAN;AAAA,CAArD,EAAgGC,KAAhG,CAAsG,UAAAC,GAAG;AAAA,SAAIH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAAJ;AAAA,CAAzG,E,CAA+H;AAE/H;;;AACAnC,GAAG,CAACG,GAAJ,CAAQiC,eAAR;AACApC,GAAG,CAACG,GAAJ,CAAQkC,gBAAR,E,CAEA;;AACArC,GAAG,CAACsC,GAAJ,CAAQ,GAAR,EAAa,UAACxB,GAAD,EAAMC,GAAN;AAAA,SAAcA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBC,MAAhB,CAAuB,aAAvB,CAAd;AAAA,CAAb;;AACA,IAAI,CAACC,MAAM,CAACC,MAAZ,EAAoB;AAAE1C,EAAAA,GAAG,CAAC2C,MAAJ,CAAWjB,cAAIF,GAAf,EAAoB;AAAA,WAAMQ,OAAO,CAACC,GAAR,kCAAsCP,cAAIF,GAA1C,EAAN;AAAA,GAApB;AAA8E,C,CAAA;;;eAErFxB,G","sourcesContent":["import express from 'express';\r\nimport ejs from 'ejs';\r\nimport mongoose from 'mongoose';\r\nimport session from 'express-session';\r\nimport flash from 'connect-flash';\r\nimport passport from 'passport';\r\nimport key from './config/keys';\r\nimport userRouter from './api/users/routes';\r\nimport profileRouter from './api/profile/routes';\r\nimport User from '../database/models/User';\r\n\r\n// Create server\r\nconst app = express();\r\n\r\n// Passport Config\r\nrequire('./config/passport')(passport);\r\n\r\n// Set static folder\r\napp.use(express.static('public'));\r\napp.use('/css', express.static('public'));\r\n\r\n// Set View Engine\r\napp.set('views', './views');\r\napp.set('view engine', 'ejs');\r\n\r\n// Bodyparser\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Express session\r\napp.use(\r\n  session({\r\n    secret: 'secret',\r\n    resave: true,\r\n    saveUninitialized: true,\r\n  })\r\n);\r\n\r\n// Passport middleware\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\n// Connect flash\r\napp.use(flash());\r\n\r\n// Global Vars\r\napp.use((req, res, next) => {\r\n  res.locals.success_msg = req.flash('success_msg');\r\n  res.locals.error_msg = req.flash('error_msg');\r\n  res.locals.error = req.flash('error');\r\n  next();\r\n});\r\n\r\n// DB Config\r\nconst db = process.env.MONGODB_URI || key.LOCALDB_URI;\r\n\r\n// Set useFindAndModify to false\r\nmongoose.set('useFindAndModify', false);\r\n\r\n// Connect to MongoDB\r\nmongoose.connect(db, { useNewUrlParser: true }).then(() => console.log('MongoDB Connected...')).catch(err => console.log(err));// eslint-disable-line no-console\r\n\r\n// Load routes\r\napp.use(userRouter);\r\napp.use(profileRouter);\r\n\r\n// Get Landing page\r\napp.get('/', (req, res) => res.status(200).render('landingpage'));\r\nif (!module.parent) { app.listen(key.env, () => console.log(`Server running on port ${key.env}`)); }// eslint-disable-line no-console\r\n\r\nexport default app;\r\n"],"file":"server.js"}